#!/bin/sh
set -e
parser_skip=0
start_time=""
end_time=""
action=""
lib_projectstruct=""
exec_projectstruct=""

_compile_obj(){
	extra_flag=""
	printf "Compiling $1 ($2)..."
	basename=$(echo $(basename $1) | cut -d. -f1)
	if [ -f obj/$basename-$2.o ]; then
		echo "Already Built."
		return 0
	else
		if [ "$2" = "shared" ]; then
			extra_flag="-fPIC"
		fi

		$CC -c $extra_flag -Iinclude $1 -o obj/$basename-$2.o $CFLAGS
		echo "Done."
	fi
}

_parse_projectstruct(){
	project_type=$(echo $1 | cut -d'|' -f1)

	if [ "$project_type" = "lib" ]; then
		libname=$(echo "$1" | cut -d'|' -f2)
		libsrc=$(echo "$1" | cut -d'|' -f3 | sed 's/,/\ /g')
		srcdir=$(echo "$1" | cut -d'|' -f4)
	elif [ "$project_type" = "exec" ]; then
		progname=$(echo "$1" | cut -d'|' -f2)
		srcdir=$(echo "$1" | cut -d'|' -f3)
		linkflags=$(echo "$1" | cut -d'|' -f4 | sed 's/,/\ /g')
		prog_no_install=$(echo "$1" | cut -d'|' -f5)
	fi

	if [ "$linkflags" = "''" ]; then
		linkflags=""
	fi

	if [ "$srcdir" = "" ]; then
		srcdir="src"
	fi
}

_runtime_calc(){
	set +e
	case $1 in
		start)
			start_time="$(date +%s)"
			printf "Operation started at $(date --date=@$start_time)\n\n"
			;;
		stop)
			end_time="$(date +%s)"
			runtime="$(expr $end_time - $start_time)"
			hours="$(expr $runtime / 3600)"
			minutes=0
			printf "Operation took "

			if [ $hours -ne 0 ]; then
				printf "$hours hours"
				runtime="$(expr $runtime - $(expr $hours '*' 3600))"
				if [ $runtime -gt 60 ]; then
					printf ", "
				else
					printf " and "
				fi
			fi
			minutes="$(expr $runtime / 60)"

			if [ $minutes -ne 0 ]; then
				printf "$minutes minutes and "
				runtime="$(expr $runtime - $(expr $minutes '*' 60))"
			fi

			echo "$runtime seconds to complete"
			;;
	esac
	set -e
}

compile_static_lib(){
	mkdir obj -p

	for i in $libsrc; do
		_compile_obj $srcdir/$i.c "static"
	done
	printf "Creating static library $libname..."
	$AR rc lib$libname.a $(find obj | grep static) 2>&1 >/dev/null
	echo "Done."
}

compile_shared_lib(){
	mkdir obj -p

	for i in $libsrc; do
		_compile_obj $srcdir/$i.c "shared"
	done
	printf "Creating shared library $libname..."
	$CC -shared $(find obj | grep shared) -o lib$libname.so $CFLAGS $LDFLAGS
	echo "Done."
	rm *.o -f
}

compile_prog(){
	printf "Compiling program $srcdir/$progname..."
	$CC $srcdir/$progname.c -Iinclude -L. $linkflags $CFLAGS -o $progname
	echo "Done."
}

install_lib(){
	printf "Installing library $libname..."
	for i in $(ls include | grep ".h"); do
		cp include/$i "$includedir"
	done
	mv lib$libname.* "$libdir"
	echo "Done."
}

install_prog(){
	if [ "$prog_no_install" != "" ]; then
		echo "Skipping $progname"
		return
	fi

	printf "Installing program $progname..."
	mv $progname "$bindir"
	echo "Done."
}

clean_lib(){
	printf "Cleaning library $libname..."
	rm -f lib$libname.*
	echo "Done."
}

clean_prog(){
	printf "Cleaning program $progname..."
	rm -f $progname
	echo "Done."
}

build_project(){
	if [ "$1" = "" ]; then
		internal_action="lib"
	else
		internal_action="$1"
	fi

	if [ $internal_action = "lib" ]; then
		if [ "$2" = "" ]; then
			internal_lib_action="shared-static"
		else
			internal_lib_action="$2"
		fi

		if [ $(echo $internal_lib_action | grep "static" -c) -ne 0 ]; then
			compile_static_lib
		fi

		if [ $(echo $internal_lib_action | grep "shared" -c) -ne 0 ]; then
			compile_shared_lib
		fi
	fi

	if [ $internal_action = "prog" ]; then
		compile_prog
	fi
}

install_project(){
	if [ "$1" = "" ]; then
		internal_action="lib"
	else
		internal_action="$1"
	fi

	if [ $internal_action = "lib" ]; then
		install_lib
	fi

	if [ $internal_action = "prog" ]; then
		install_prog
	fi
}

clean_project(){
	if [ "$1" = "" ]; then
		internal_action="lib"
	else
		internal_action="$1"
	fi

	if [ $internal_action = "lib" ]; then
		clean_lib
	fi

	if [ $internal_action = "prog" ]; then
		clean_prog
	fi
}

printf "PocketLinux32's Generic C Build System v0.03\n\n"

if [ $# -lt 1 ]; then
	echo "Error: Not enough arguments. Please run $0 help to see all of the valid options and try again"
	exit 1
fi

case $1 in
	clean)
		action="clean_project"
		;;
	build)
		action="build_project"
		;;
	install)
		action="install_project"
		;;
	help)
		echo "clean			Removes any files generated during compilation"
		echo "build [action]	Compiles the library or the library testcase"
		echo "install		Installs the compiled library to dest"
		exit 0
		;;
	*)
		echo "Error: Unrecognized option. Please run $0 help to see all of the valid options and try again"
		exit 1
esac

if [ ! -f ".config" ]; then
	echo "Error: You haven't configured the system yet! Please run ./configure --help and try again"
	exit 1
fi
. ./.config

echo "Compiler: $CC"
echo "Compiler Flags: $CFLAGS"
printf "Linker Flags: $LDFLAGS\n\n"

_runtime_calc start
for i in $main_project; do
	project_type=$(echo $i | cut -d'|' -f1)

	if [ "$project_type" = "lib" ]; then
		if [ "$lib_projectstruct" = "" ]; then
			lib_projectstruct="$i"
		else
			lib_projectstruct="$lib_projectstruct $i"
		fi
	elif [ "$project_type" = "exec" ]; then
		if [ "$exec_projectstruct" = "" ]; then
			exec_projectstruct="$i"
		else
			exec_projectstruct="$exec_projectstruct $i"
		fi
	fi
done

if [ "$action" = "clean_project" ]; then
	rm -rf obj core*
	if [ "$2" = "fully" ]; then
		rm -f .config
	fi
fi

for i in $lib_projectstruct; do
	_parse_projectstruct $i
	$action lib $3
done

for i in $exec_projectstruct; do
	_parse_projectstruct $i
	$action prog
done

_runtime_calc stop
